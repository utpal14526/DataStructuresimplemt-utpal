#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
// if there is no update query go for sparse table

// Segment tree for maximum

class SegmentTree
{

public:
    ll n;
    vector<ll> tree;

    SegmentTree(ll n)
    {
        tree.resize(4000000);
        this->n = n;
    }

    void build(ll arr[], ll l, ll r, ll node)
    {

        if (l == r)
        {
            tree[node] = arr[l];
            return;
        }

        ll mid = l + (r - l) / 2;

        build(arr, l, mid, 2 * node + 1);
        build(arr, mid + 1, r, 2 * node + 2);

        tree[node] = (tree[2 * node + 1] + tree[2 * node + 2]);
    }

    ll query(ll l, ll r, ll st, ll en, ll arr[], ll node)
    {

        if (en < l || st > r || st > en)
        {
            return 0;
        }

        if (st >= l && en <= r)
        {
            return tree[node];
        }

        ll mid = st + (en - st) / 2;

        return query(l, r, st, mid, arr, 2 * node + 1) + query(l, r, mid + 1, en, arr, 2 * node + 2);
    }

    void pointupdate(ll arr[], int st, int en, int u, int k, int node)
    {

        if (st == en)
        {

            tree[node] = k;
            return;
        }

        int mid = st + (en - st) / 2;

        if (u <= mid)
        {
            pointupdate(arr, st, mid, u, k, 2 * node + 1);
        }
        else
        {
            pointupdate(arr, mid + 1, en, u, k, 2 * node + 2);
        }

        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }
};

int main()
{

    ll n, q;
    cin >> n >> q;

    ll arr[n];
    for (ll i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    SegmentTree s(n);
    s.build(arr, 0, n - 1, 0);

    for (ll i = 0; i < q; i++)
    {

        ll x;
        cin >> x;

        if (x == 1)
        {

            ll u, k;
            cin >> u >> k;
            u--;

            // a and b now are 0 indexed

            s.pointupdate(arr, 0, n - 1, u, k, 0);
        }
        else
        {

            ll a, b;
            cin >> a >> b;
            a--;
            b--;

            cout << s.query(a, b, 0, n - 1, arr, 0) << endl;
        }
    }

    // ans
}
